// Campus police reports mac addresses of stolen laptops
// FOR NOW this just naively looks at the mac of every packet, and spams the police if 
// a stolen laptop is seen (and when). More sophisticated example would either get notification
// from NIB that a new host has connected, or limit its messages.

blackbox BBtimer @ 127.0.0.1 9091;
blackbox BBpolice @ 127.0.0.1 5050; // (The 5-0)

// Should get all notifs declared in Canary (and in Mac_Learning since Canary imports Mac_Learning)
import Mac_Learning;

module Stolen_Laptop:

type stolen_laptop_report = {mac};
type stolen_laptop_cancel = {mac};
type stolen_laptop_found = {mac,swid,time};

forward(pkt : packet, newpkt : packet) :- Mac_learning.forward(pkt, newpkt);

+stolen(report: stolen_laptop_report, mac) :- report.mac = mac;

// TODO
// Can't do this right now; we hit the interpreter's lack of type sensitivity on evaluation
//-stolen(cancel: stolen_laptop_cancel, mac) :- cancel.mac = mac;

// Will currently call timer for EVERY PACKET, not just stolen ones.
// Obvious room for improvement.
BBpolice(pkt : packet, found: stolen_laptop_found) :- 
  stolen(pkt.dlSrc), found.mac = pkt.dlSrc, found.swid = pkt.locSw, BBTimer.time(found.time);
