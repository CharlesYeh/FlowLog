/*
 * Basic functionality for handling external (non-directly attached) subnets.
 *
 * The core of this module is a routing table with a list of subnets and their
 * corresponding gateway's IP address.
 *
 *
 * TODO:
 *  - expose routes as an external table which is managed by Quagga
 *  - should issue ARP requests for every nexthop (gateway) IP
 *    automatically, rather than requiring they be entered into the cached
 *    relation by hand at startup.
 */

/*******************************************************************************
 *
 * Data Structures
 *
 ******************************************************************************/

// Routing table for non-directly attached subnets
//
// Column values:
// subnet, mask, next-hop IP
TABLE routes(ipaddr, int, ipaddr);

/*******************************************************************************
 *
 * L3 routing to non-directly attached subnets
 *
 * TODO(adf): would be great if NAT were not explicitly considered here
 *
 ******************************************************************************/

// packets destined to outside whose source does NOT need NATing

// THIS one by itself: arp weirdness
// Even without the ARP rule in L3router
// But DOES need the last rule (reply rule) in Arp_Cache

ON ip_packet(pkt):
  DO forward(new) WHERE
    routes(addr, mask, nexthop)
    and subnets(nexthop_subnet, nexthop_mask, ANY, new.dlSrc, pkt.locSw, new.locPt, ANY)
 //   and pkt.nwDst IN addr/mask
      and nexthop IN nexthop_subnet/nexthop_mask
      and pkt.nwDst = addr
      //and nexthop = nexthop_subnet
    //and cached(nexthop, new.dlDst) // MAC addr of nexthop IP


    and needs_nat(needs_nat_subnet, needs_nat_mask)
 //   and NOT (pkt.nwSrc IN needs_nat_subnet/needs_nat_mask)
    and NOT (pkt.nwSRC = needs_nat_subnet)
    ;

// packets destined to outside whose source says they need NATing
/*
 if
 ((dstIP = 4.4.0.0/0.0.0.16 && dlTyp = ip) && switch = 1152921504606846977)
 || (dstIP = 8.0.0.0/0.0.0.24 && dlTyp = ip) && switch = 1152921504606846977
   then dlSrc ->be:ef:be:ef:00:00; 4 else drop)
*/

// This one by itself: ip, nwsrc, etc.

/*ON ip_packet(pkt):
  DO forward(new) WHERE
    routes(addr, mask, nexthop)
    and pkt.nwDst IN addr/mask

    and subnets(ANY, ANY, ANY, ANY, pkt.locSw, ANY, ANY) // TODO(adf): only apply to routers

    and needs_nat(needs_nat_subnet, needs_nat_mask) // <-- should this be router-specific?
    and (pkt.nwSrc IN needs_nat_subnet/needs_nat_mask)

    and new.locPt = 1; // TODO(adf): magic NAT port?
*/
